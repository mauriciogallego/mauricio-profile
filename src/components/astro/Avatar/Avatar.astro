<script>
  import * as THREE from 'three';
  import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
  import { initialPosition, playAnimations } from './Actions.js';

  const avatar = document.getElementById('avatar-animation');
  const width = window.innerWidth / 4;
  const height = window.innerHeight / 1.5;

  if (!avatar) {
    throw new Error();
  }
  // Initialize Renderer
  const renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.outputColorSpace = THREE.SRGBColorSpace;
  renderer.setSize(width, height);
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setClearColor(0xfffff, 0); // Light gray background
  renderer.shadowMap.enabled = true;
  renderer.shadowMap.type = THREE.PCFSoftShadowMap;
  renderer.toneMapping = THREE.ACESFilmicToneMapping; // Apply Linear tone mapping
  renderer.toneMappingExposure = 1.9; // Adjust exposure

  avatar.appendChild(renderer.domElement);

  // Initialize Scene
  const scene = new THREE.Scene();

  // Initialize Camera
  const camera = new THREE.PerspectiveCamera(75, width / height, 1, 1000);

  camera.position.set(1, 4.9, 11);
  camera.aspect = width / height;
  camera.lookAt(-1, 1, 0);
  camera.updateProjectionMatrix();
  scene.add(camera);

  // SpotLight for focused lighting
  const spotLight = new THREE.SpotLight(0xffffff, 1.5);
  spotLight.position.set(10, 15, 10);
  spotLight.castShadow = true;
  spotLight.shadow.radius = 4;
  spotLight.shadow.mapSize.set(2048, 2048);
  scene.add(spotLight);

  // Bright ambient light for overall illumination
  const ambientLight = new THREE.AmbientLight(0xffffff, 0.3);
  scene.add(ambientLight);

  // Add a key light (main light source)
  const keyLight = new THREE.DirectionalLight(0xffffff, 1.0);
  keyLight.shadow.mapSize.width = 2048;
  keyLight.intensity = 1.2; // Brighter key light
  keyLight.shadow.mapSize.height = 2048;
  keyLight.shadow.radius = 8;
  keyLight.position.set(10, 10, 10);
  keyLight.castShadow = true;
  scene.add(keyLight);

  // Add a fill light (softens shadows)
  const fillLight = new THREE.DirectionalLight(0xffffff, 0.5);
  fillLight.position.set(-10, 5, 5);
  fillLight.intensity = 0.6; // Balanced fill light
  scene.add(fillLight);

  // Add a back light (adds depth)
  const backLight = new THREE.DirectionalLight(0xffffff, 0.3);
  backLight.position.set(0, 10, -10);
  scene.add(backLight);

  const hemisphereLight = new THREE.HemisphereLight(0xffffff, 0x444444, 0.5); // Adjust intensity as needed
  hemisphereLight.position.set(0, 20, 0);
  scene.add(hemisphereLight);

  const lightProbe = new THREE.LightProbe();
  lightProbe.intensity = 0.5;
  scene.add(lightProbe);

  const specularLight = new THREE.SpotLight(0xffffff, 0.3);
  specularLight.position.set(5, 10, 5);
  scene.add(specularLight);

  // Load GLTF Model
  const loader = new GLTFLoader();
  let bones = new Map();

  loader.setPath('/avatar/');
  loader.load(
    'avatar_mauricio.glb',
    (gltf) => {
      const mesh = gltf.scene;
      mesh.position.set(1, -3.05, 4);
      mesh.scale.setScalar(5);

      // Traverse to populate bones map and enable shadows
      mesh.traverse((node: any) => {
        if (node.isBone) {
          const bone = node as THREE.Bone;
          bones.set(bone.name, bone); // Add bones to the map
        }

        if (node.isMesh) {
          node.castShadow = true;
          node.receiveShadow = true;
        }

        const material = node.material;
        if (material && material.isMeshStandardMaterial) {
          material.envMapIntensity = 1.0; // Reflective lighting intensity
        }
      });

      scene.add(mesh);

      initialPosition(bones);
      setTimeout(() => playAnimations(bones), 1000);
    },
    function (xhr) {
      console.log((xhr.loaded / xhr.total) * 100 + '% loaded');
    },
    function (error) {
      console.error(error);
      console.error('An error occurred while loading the model.');
    },
  );

  // Handle Window Resizing
  window.addEventListener('resize', () => {
    const width = window.innerWidth / 4;
    const height = window.innerHeight / 1.5;

    camera.aspect = width / height;
    camera.updateProjectionMatrix();

    renderer.setSize(width, height);

    // Match screen resolution
    renderer.setPixelRatio(window.devicePixelRatio);
  });

  function animate() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
  }
  animate();
</script>

<div id="avatar-animation"></div>
