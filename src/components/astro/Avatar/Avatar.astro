---

---

<div id="avatar-animation"></div>

<script>
  import * as THREE from 'three';
  import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
  import {
    initialPosition,
    playAnimations,
    initRender,
    initScene,
    initCamera,
    initSpotLights,
    resizeAvatar,
  } from './Actions.js';
  import type { SceneState } from './types';

  let state: SceneState = {
    renderer: null,
    scene: null,
    camera: null,
    animateId: null,
    bones: new Map(),
  };

  function setUp() {
    const avatar = document.getElementById('avatar-animation');
    if (!avatar) {
      throw new Error();
    }
    state.scene = initScene();
    state.renderer = initRender();
    state.camera = initCamera();

    if (!state.scene || !state.camera || !state.renderer) {
      return;
    }

    const lightSpots = initSpotLights();

    // Initialize Camera
    state.scene.add(state.camera);

    lightSpots.forEach((light) => {
      if (light && state.scene) {
        state.scene.add(light);
      }
    });

    // Load GLTF Model
    const loader = new GLTFLoader();

    loader.setPath('/avatar/');
    loader.load(
      'avatar_mauricio.glb',
      (gltf) => {
        if (!state.scene) return;

        const mesh = gltf.scene;
        mesh.position.set(1, -3.05, 4);
        mesh.scale.setScalar(5);

        // Traverse to populate bones map and enable shadows
        mesh.traverse((node: any) => {
          if (node.isBone) {
            const bone = node as THREE.Bone;
            state.bones.set(bone.name, bone); // Add bones to the map
          }

          if (node.isMesh) {
            node.castShadow = true;
            node.receiveShadow = true;
          }

          const material = node.material;
          if (material && material.isMeshStandardMaterial) {
            material.envMapIntensity = 1.0; // Reflective lighting intensity
          }
        });

        initialPosition(state.bones);
        state.scene.add(mesh);
      },
      function (xhr) {
        console.log((xhr.loaded / xhr.total) * 100 + '% loaded');
      },
      function (error) {
        console.error('Failed to load avatar:', error);
        const errorMessage = document.createElement('div');
        errorMessage.textContent = 'Avatar could not be loaded.';
        avatar.appendChild(errorMessage);
      },
    );

    window.addEventListener('resize', updateSize);
    avatar.appendChild(state.renderer.domElement);
  }

  function animate() {
    if (state.renderer && state.scene && state.camera) {
      state.renderer.render(state.scene, state.camera);
      state.animateId = requestAnimationFrame(animate);
    }
  }

  function updateSize() {
    if (!state.camera || !state.renderer) return;

    const { width, height } = resizeAvatar();

    state.camera.aspect = width / height;
    state.camera.updateProjectionMatrix();

    state.renderer.setSize(width, height);

    // Match screen resolution
    state.renderer.setPixelRatio(window.devicePixelRatio);
  }

  document.addEventListener('astro:page-load', () => {
    const path = window.location.pathname; // Get the current URL as a URL object
    if (path == '/' || path == '/es/') {
      setUp();
      state.animateId = requestAnimationFrame(animate);

      setTimeout(() => playAnimations(state.bones), 1000);
    }
  });

  document.addEventListener('astro:before-swap', () => {
    const avatar = document.getElementById('avatar-animation');

    if (state.animateId) {
      cancelAnimationFrame(state.animateId);
    }

    if (state.renderer) {
      state.renderer.dispose();
      avatar?.removeChild(state.renderer.domElement);
    }

    if (state.scene) {
      state.scene.traverse((child: any) => {
        if (child.isMesh) {
          child.geometry.dispose();
          if (child.material.isMaterial) {
            child.material.dispose();
          }
        }
      });
    }

    state.renderer = null;
    state.scene = null;
    state.camera = null;

    window.removeEventListener('resize', updateSize);
  });
</script>
